********************1、数组***************************

创建数组：(索引数组、关联数组)
  $arr=array();
  
索引数组：
  $fruit=array("苹果","香蕉","菠萝");
  print_r($fruit);
  赋值：
    1）  $fruit[0]='苹果';
    2）  $fruit=array('0'=>'苹果');
    3）  $fruit=array('苹果');

关联数组：
  1）$arr['apple']='苹果';
  2）$arr=array('apple'=>'苹果');

-----------------------------------
foreach循环：
  $fruit=array('apple'=>"苹果",'banana'=>"香蕉",'pineapple'=>"菠萝");
  foreach($fruit as $key=>$value){
    echo '<br>键是：'.$key.'，对应的值是：'.$value;
  }
  
-----------------------------------

****************************2、函数***********************************

可变函数：
  function name(){
    echo 'jobs';
  }
  $func='name';
  $func(); //调用可变函数

---------------------------------
内置函数：
  str_replace   可以实现字符串的替换。

  $str='i am jobs';
  $str=str_replace('jobs','steven jobs',$str);
  echo $str; //结果为“i am steven jobs”

  function_exists   判断函数是否存在
  
  function func(){
  }
  if(function_exists('func')){
    echo 'exists';
  }

  class_exists   判断类是否定义
  
  class MyClass{
  }
  if(class_exists('MyClass')){
    $myclass=new MyClass();
  }

  file_exists   判断文件是否存在
  
  $filename='test.txt';
  if(!file_exists($filename)){
    echo $filename.'not exists';
  }

---------------------------------

***************************3、类与面向对象***************************

创建一个对象：

//定义一个类
class Car{
  //定义属性
  public $name='汽车';
  
  //定义方法
  public function getName(){
    //方法内部可以使用$this伪变量调用对象的属性或者方法
    return $this->name;
  }
}

//创建一个类的实例
$car=new Car();
//也可以采用变量来创建
$className='Car';
$car=new $className();

---------------------------------
访问控制的关键字：
  public：公开的
  protected：受保护的
  private：私有的
默认都为public，外部可以访问。一般通过->对象操作符来访问对象的属性或者方法，对于静态属性则使用::双冒号进行访问。

-----------------------------------
在面向过程的程序设计中function叫做函数，在面向对象中function则被称之为方法。

class Car{
  public function getName(){
    return '汽车';
  }
}
$car=new Car();
echo $car->getName();

使用关键字static修饰的，称之为静态方法，静态方法不需要实例化对象，可以通过类名直接调用，操作符为双冒号::。

class Car{
  public static function getName(){
    return '汽车';
  }
}
echo Car::getName();   //结果为“汽车”

-------------------------------
PHP5可以在类中使用__construct()定义一个构造函数，具有构造函数的类，会在每次对象创建的时候调用该函数，因此常用来在对象创建的时候进行一些初始化。

class Car{
  function __construct(){
    print "构造函数被调用\n";
  }
}
$car=new Car();   //实例化时，会自动调用构造函数__construct。

在子类中如果定义了__construct则不会调用父类的__construct,如果需要同时调用父类的构造函数，需要使用parent::__construct()显式的调用。

class Car{
  function __construct(){
    print "父类构造函数被调用\n";
  }
}
class Truck extends Car{
  function __construct(){
    print "子类构造函数被调用\n";
    parent::__construct();
  }
}
$car=new Truck();

------------------------------------
PHP5支持析构函数，使用__destruct()进行定义，析构函数指的是当某个对象的所有引用被删除，或者对象被显式的销毁时会执行的函数。

class Car{
  function __construct(){
    print "构造函数被调用\n";
  }
  function __destruct(){
    print "析构函数被调用\n";
  }
}
$car=new Car();   //实例化时会调用构造函数
echo '使用后，准备销毁car对象\n';
unset($car);   //销毁时会调用析构函数

-------------------------------------
静态属相与方法可以在不实例化类的情况下调用，直接使用类名::方法名的方式进行调用。静态属性不允许对象使用->操作符调用。

class Car{
  private static $speed=10;
  public static function getSpeed(){
    return self::$speed;
  }
}
echo Car::getSpeed();   //调用静态方法

静态方法也可以通过变量来进行动态调用

$func='getSpeed';
$className='Car';
echo $className::$func();   //动态调用静态方法

静态方法中，$this伪变量不允许使用。可以使用self,parent,static在内部调用静态方法与属性。

class Car{
  private static $speed=10;
  public static function getSpeed(){
    return self::$speed;
  }
  public static function speedUp(){
    return self::$speed+=10;
  }
}
class BigCar extends Car{
  public static function start(){
    parent::speedUp();
  }
}
BigCar::start();
echo BigCar::getSpeed();

------------------------------------
属性的重载通过__set,__get,__isset,__unset来分别实现对不存在属性的赋值、读取、判断属性是否设置、销毁属性。

方法的重载通过__call来实现，当调用不存在的方法的时候，将会转为参数调用__call方法，当调用不存在的静态方法时会使用__callStatic重载。

------------------------------------
对象复制：在一些特殊情况下，可以通过关键字clone来复制一个对象，这时__clone方法会被调用。

对象序列化：可以通过serialize方法将对象序列化为字符串，用于存储或者传递数据，然后在需要的时候通过unserialize将字符串反序列化成对象进行使用。

----------------------------------------

**********************************4、字符串操作**********************************

PHP中有三个函数可以去掉字符串的空格：
  trim去除一个字符串两端空格。
  ltrim是去除一个字符串左部空格。
  rtrim是去除一个字符串右部空格。

----------------------------------------
获取字符串的长度：
  strlen()
  mb_strlen()函数获取字符串中中文长度
    $str = "我爱你";
    echo mb_strlen($str,"UTF8");

----------------------------------------
字符串截取：
  substr(字符串变量,开始位置，截取个数)
  mb_substr(字符串变量,开始位置,截取个数,网页编码)

-----------------------------------------
字符串查找：
  strpos(要处理的字符串,要定位的字符串,定位的起始位置[可选])

